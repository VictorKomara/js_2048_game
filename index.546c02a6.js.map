{"mappings":"AEAe,MAAA,EACb,CAAA,CAAY,AAAC,AACb,EAAA,CAAE,AAAC,AACH,EAAA,CAAE,AAAC,AACH,EAAA,CAAM,AAAC,AAEP,aAAY,CAAa,CAAE,EAAQ,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CAAC,CAAE,CAC9D,IAAI,CAAC,CAAA,CAAY,CAAG,SAAS,aAAa,CAAC,OAC3C,IAAI,CAAC,CAAA,CAAY,CAAC,SAAS,CAAC,GAAG,CAAC,QAChC,EAAc,MAAM,CAAC,IAAI,CAAC,CAAA,CAAY,EACtC,IAAI,CAAC,KAAK,CAAG,CACf,CAEA,IAAI,OAAQ,CACV,OAAO,IAAI,CAAC,CAAA,CAAM,AACpB,CAEA,IAAI,MAAM,CAAC,CAAE,CACX,IAAI,CAAC,CAAA,CAAM,CAAG,EACd,IAAI,CAAC,CAAA,CAAY,CAAC,WAAW,CAAG,EAEhC,GAAM,CAAA,WAAE,CAAU,CAAA,UAAE,CAAS,CAAE,CAAG,AAyCtC,SAAmB,CAAM,EACvB,IAAI,EAAS,CAAC,EAEd,OAAQ,GACN,KAAK,EACH,EAAS,CACP,WAAY,UACZ,UAAW,SACb,EACA,KACF,MAAK,EACH,EAAS,CACP,WAAY,UACZ,UAAW,SACb,EACA,KACF,MAAK,EACH,EAAS,CACP,WAAY,UACZ,UAAW,SACb,EACA,KACF,MAAK,GACH,EAAS,CACP,WAAY,UACZ,UAAW,SACb,EACA,KACF,MAAK,GACH,EAAS,CACP,WAAY,UACZ,UAAW,SACb,EACA,KACF,MAAK,GACH,EAAS,CACP,WAAY,UACZ,UAAW,SACb,EACA,KACF,MAAK,IACH,EAAS,CACP,WAAY,UACZ,UAAW,SACb,EACA,KACF,MAAK,IACH,EAAS,CACP,WAAY,UACZ,UAAW,SACb,EACA,KACF,MAAK,IACH,EAAS,CACP,WAAY,UACZ,UAAW,SACb,EACA,KACF,MAAK,KACH,EAAS,CACP,WAAY,UACZ,UAAW,SACb,EACA,KACF,MAAK,KACH,EAAS,CACP,WAAY,UACZ,UAAW,SACb,CACJ,CAEA,OAAO,CACT,EAjHgD,GAE5C,IAAI,CAAC,CAAA,CAAY,CAAC,KAAK,CAAC,WAAW,CAAC,qBAAsB,GAC1D,IAAI,CAAC,CAAA,CAAY,CAAC,KAAK,CAAC,WAAW,CAAC,eAAgB,EACtD,CAEA,IAAI,EAAE,CAAK,CAAE,CACX,IAAI,CAAC,CAAA,CAAE,CAAG,EACV,IAAI,CAAC,CAAA,CAAY,CAAC,KAAK,CAAC,WAAW,CAAC,MAAO,EAC7C,CAEA,IAAI,GAAI,CACN,OAAO,IAAI,CAAC,CAAA,CAAE,AAChB,CAEA,IAAI,EAAE,CAAK,CAAE,CACX,IAAI,CAAC,CAAA,CAAE,CAAG,EACV,IAAI,CAAC,CAAA,CAAY,CAAC,KAAK,CAAC,WAAW,CAAC,MAAO,EAC7C,CAEA,IAAI,GAAI,CACN,OAAO,IAAI,CAAC,CAAA,CAAE,AAChB,CAEA,QAAS,CACP,IAAI,CAAC,CAAA,CAAY,CAAC,MAAM,EAC1B,CAEA,kBAAkB,EAAY,CAAA,CAAK,CAAE,CACnC,OAAO,IAAI,QAAQ,AAAC,IAClB,IAAI,CAAC,CAAA,CAAY,CAAC,gBAAgB,CAChC,EAAY,eAAiB,gBAC7B,EACA,CACE,KAAM,CAAA,CACR,EAEJ,EACF,CACF,C,I,E,C,ECvDA,IAAI,EAAQ,CAEZ,OAAM,EACJ,OAAO,SAAW,CAChB,KAAM,OACN,QAAS,UACT,IAAK,MACL,KAAM,MACR,CAAE,AACF,EAAA,CAAM,AAAC,AAEP,aAAY,CAAW,CAAE,CACvB,EAAY,KAAK,CAAC,WAAW,CAAC,cAfhB,GAgBd,EAAY,KAAK,CAAC,WAAW,CAAC,cAAe,QAC7C,EAAY,KAAK,CAAC,WAAW,CAAC,aAAc,QAE5C,IAAI,CAAC,CAAA,CAAM,CAAG,AAiPlB,CAAA,SAA4B,CAAW,EACrC,IAAM,EAAQ,EAAE,CAEhB,IAAK,IAAI,EAAI,EAAG,EAAI,GAAuB,IAAK,CAC9C,IAAM,EAAO,SAAS,aAAa,CAAC,OAEpC,EAAK,SAAS,CAAC,GAAG,CAAC,QACnB,EAAM,IAAI,CAAC,GACX,EAAY,MAAM,CAAC,EACrB,CAEA,OAAO,CACT,CAAA,EA7PqC,GAAa,GAAG,CAAC,CAAC,EAAa,IACvD,IAAI,EACT,EACA,EAtBU,EAuBV,KAAK,KAAK,CAAC,EAvBD,KA0Bd,EAAQ,EACR,IAAI,CAAC,MAAM,CAAG,EAAK,QAAQ,CAAC,IAAI,CAEhC,IAAI,CAAC,KAAK,CAAG,CACX,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,AACH,CAEA,IAAI,OAAQ,CACV,OAAO,IAAI,CAAC,CAAA,CAAM,AACpB,CAEA,IAAI,YAAa,CACf,OAAO,IAAI,CAAC,CAAA,CAAM,CAAC,MAAM,CAAC,CAAC,EAAU,KACnC,CAAQ,CAAC,EAAK,CAAC,CAAC,CAAG,CAAQ,CAAC,EAAK,CAAC,CAAC,EAAI,EAAE,CACzC,CAAQ,CAAC,EAAK,CAAC,CAAC,CAAC,EAAK,CAAC,CAAC,CAAG,EAEpB,GACN,EAAE,CACP,CAEA,IAAI,eAAgB,CAClB,OAAO,IAAI,CAAC,CAAA,CAAM,CAAC,MAAM,CAAC,CAAC,EAAU,KACnC,CAAQ,CAAC,EAAK,CAAC,CAAC,CAAG,CAAQ,CAAC,EAAK,CAAC,CAAC,EAAI,EAAE,CACzC,CAAQ,CAAC,EAAK,CAAC,CAAC,CAAC,EAAK,CAAC,CAAC,CAAG,EAEpB,GACN,EAAE,CACP,CAEA,IAAI,CAAA,CAAW,GACb,OAAO,IAAI,CAAC,CAAA,CAAM,CAAC,MAAM,CAAC,AAAC,GAAS,AAAa,MAAb,EAAK,IAAI,CAC/C,CAEA,iBAAkB,CAChB,IAAM,EAAc,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,IAAI,CAAC,CAAA,CAAW,CAAC,MAAM,EAEtE,OAAO,IAAI,CAAC,CAAA,CAAW,CAAC,EAAY,AACtC,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CACxC,CAEA,WAAY,CACV,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,CAAC,OAAO,IACtE,CAEA,QAAS,CACP,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAC3C,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,UAAU,CACpB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,AAAC,GAAW,IAAI,EAAO,CAAC,OAAO,IAE1D,CAEA,WAAW,CAAK,CAAE,CAChB,OAAO,QAAQ,GAAG,CAChB,EAAM,OAAO,CAAC,AAAC,IACb,IAAM,EAAW,EAAE,CAEnB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IAAK,KAOjC,EANJ,IAAM,EAAO,CAAK,CAAC,EAAE,CAErB,GAAI,AAAa,MAAb,EAAK,IAAI,EAMb,IAAK,IAAI,EAAI,EAAI,EAAG,GAAK,EAAG,IAAK,CAC/B,IAAM,EAAa,CAAK,CAAC,EAAE,CAE3B,GAAI,CAAC,EAAW,SAAS,CAAC,EAAK,IAAI,EACjC,MAEF,EAAgB,CAClB,CAEqB,MAAjB,IACF,EAAS,IAAI,CAAC,EAAK,IAAI,CAAC,iBAAiB,IAErC,AAAsB,MAAtB,EAAc,IAAI,CACpB,EAAc,SAAS,CAAG,EAAK,IAAI,CAEnC,EAAc,IAAI,CAAG,EAAK,IAAI,CAEhC,EAAK,IAAI,CAAG,MAEhB,CAEA,OAAO,CACT,GAEJ,CAKA,UAAW,CACT,OAAO,CACT,CAKA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAYA,WAAY,CACV,OAAO,IAAI,CAAC,MAAM,AACpB,CAEA,UAAU,CAAU,CAAE,CACpB,IAAI,CAAC,MAAM,CAAG,CAChB,CAEA,OAAQ,CACN,IAAI,CAAC,MAAM,CAAG,EAAK,QAAQ,CAAC,OAAO,AACrC,CAEA,aAAc,CACZ,IAAI,EAAQ,CAAA,EAYZ,OAVA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,AAAC,IACD,MAAb,EAAK,IAAI,EAIT,AAAoB,OAApB,EAAK,IAAI,CAAC,KAAK,EACjB,CAAA,EAAQ,CAAA,CADV,CAGF,GAEO,CACT,CAEA,SAAU,CAGR,AAFc,SAAS,gBAAgB,CAAC,SAElC,OAAO,CAAC,AAAC,GAAO,EAAG,MAAM,IAC/B,EAAQ,EACR,IAAI,CAAC,MAAM,CAAG,EAAK,QAAQ,CAAC,OAAO,CAEnC,IAAI,CAAC,CAAA,CAAM,CAAC,OAAO,CAAC,AAAC,IACnB,EAAK,IAAI,CAAG,KACZ,EAAK,SAAS,CAAG,IACnB,EACF,CACF,CAEA,MAAM,EACJ,CAAA,CAAY,AAAC,AACb,EAAA,CAAE,AAAC,AACH,EAAA,CAAE,AAAC,AACH,EAAA,CAAK,AAAC,AACN,EAAA,CAAU,AAAC,AAEX,aAAY,CAAW,CAAE,CAAC,CAAE,CAAC,CAAE,CAC7B,IAAI,CAAC,CAAA,CAAY,CAAG,EACpB,IAAI,CAAC,CAAA,CAAE,CAAG,EACV,IAAI,CAAC,CAAA,CAAE,CAAG,CACZ,CAEA,IAAI,GAAI,CACN,OAAO,IAAI,CAAC,CAAA,CAAE,AAChB,CAEA,IAAI,GAAI,CACN,OAAO,IAAI,CAAC,CAAA,CAAE,AAChB,CAEA,IAAI,MAAO,CACT,OAAO,IAAI,CAAC,CAAA,CAAK,AACnB,CAEA,IAAI,KAAK,CAAK,CAAE,CACd,IAAI,CAAC,CAAA,CAAK,CAAG,EAEA,MAAT,IAGJ,IAAI,CAAC,CAAA,CAAK,CAAC,CAAC,CAAG,IAAI,CAAC,CAAA,CAAE,CACtB,IAAI,CAAC,CAAA,CAAK,CAAC,CAAC,CAAG,IAAI,CAAC,CAAA,CAAE,CACxB,CAEA,IAAI,WAAY,CACd,OAAO,IAAI,CAAC,CAAA,CAAU,AACxB,CAEA,IAAI,UAAU,CAAK,CAAE,CACnB,IAAI,CAAC,CAAA,CAAU,CAAG,EAEL,MAAT,IAGJ,IAAI,CAAC,CAAA,CAAU,CAAC,CAAC,CAAG,IAAI,CAAC,CAAA,CAAE,CAC3B,IAAI,CAAC,CAAA,CAAU,CAAC,CAAC,CAAG,IAAI,CAAC,CAAA,CAAE,CAC7B,CAEA,UAAU,CAAI,CAAE,CACd,OACE,AAAa,MAAb,IAAI,CAAC,IAAI,EACR,AAAkB,MAAlB,IAAI,CAAC,SAAS,EAAY,IAAI,CAAC,IAAI,CAAC,KAAK,GAAK,EAAK,KAAK,AAE7D,CAEA,YAAa,CACM,MAAb,IAAI,CAAC,IAAI,EAAY,AAAkB,MAAlB,IAAI,CAAC,SAAS,GAGvC,GAAS,IAAI,CAAC,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAC/C,IAAI,CAAC,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CACxD,IAAI,CAAC,SAAS,CAAC,MAAM,GACrB,IAAI,CAAC,SAAS,CAAG,KACnB,CACF,CAgBA,EAAiB,EF/QjB,MAAM,EAAW,SAAS,aAAa,CAAC,UAClC,EAAY,SAAS,aAAa,CAAC,eACnC,EAAY,SAAS,aAAa,CAAC,eACnC,EAAW,SAAS,aAAa,CAAC,sBAAsB,QAAQ,CAChE,EAAO,IAAI,EAAK,GAEtB,SAAS,IACP,EAAU,WAAW,CAAG,EAAK,QAAQ,EACvC,CAEA,SAAS,IACP,GAAM,CAAC,EAAa,EAAY,EAAa,CAAG,EAC1C,EAAa,EAAK,SAAS,GAC3B,EAAc,SAMpB,OAJA,MAAM,IAAI,CAAC,GAAU,OAAO,CAAC,AAAC,IAC5B,EAAQ,SAAS,CAAC,GAAG,CAAC,EACxB,GAEQ,GACN,KAAK,EAAK,QAAQ,CAAC,IAAI,CACrB,EAAa,SAAS,CAAC,MAAM,CAAC,GAC9B,KACF,MAAK,EAAK,QAAQ,CAAC,GAAG,CACpB,EAAW,SAAS,CAAC,MAAM,CAAC,GAC5B,KACF,MAAK,EAAK,QAAQ,CAAC,IAAI,CACrB,EAAY,SAAS,CAAC,MAAM,CAAC,EAIjC,CACF,CAEA,SAAS,IACP,IAAI,EAAU,CAAA,EAEd,SAAS,gBAAgB,CACvB,aACA,AAAC,IAGC,GAFA,EAAE,cAAc,GAEZ,EACF,OAGF,EAAU,CAAA,EAEV,IAAM,EAAS,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,CAC7B,EAAS,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,CAC/B,EAAW,CAAA,EAEf,SAAS,gBAAgB,CACvB,WACA,AAAC,IAGC,GAFA,EAAG,cAAc,GAEb,EACF,OAGF,EAAW,CAAA,EAEX,IAAM,EAAO,EAAG,cAAc,CAAC,EAAE,CAAC,OAAO,CACnC,EAAO,EAAG,cAAc,CAAC,EAAE,CAAC,OAAO,CAEnC,EAAS,EAAO,EAChB,EAAS,EAAO,EAChB,EAAY,KAAK,GAAG,CAAC,GACrB,EAAY,KAAK,GAAG,CAAC,GAGrB,EAAM,CAAE,IAAK,GAAI,EAEvB,GAAI,EAHc,KAGW,EAHX,IAGkC,CAClD,EAAU,CAAA,EACV,EAAW,CAAA,EACX,IAEA,MACF,CAGI,EAZc,IAaZ,EAAS,EACX,EAAI,GAAG,CAAG,aAEV,EAAI,GAAG,CAAG,YAEH,KAAK,GAAG,CAAC,GAlBF,MAmBZ,EAAS,EACX,EAAI,GAAG,CAAG,YAEV,EAAI,GAAG,CAAG,WAId,EAAW,GACX,EAAU,CAAA,EACV,EAAW,CAAA,CACb,EACA,CAAE,KAAM,CAAA,CAAK,EAEjB,EACA,CAAE,KAAM,CAAA,CAAK,EAEjB,CAEA,eAAe,EAAW,CAAC,EACzB,GAAI,EAAK,SAAS,KAAO,EAAK,QAAQ,CAAC,OAAO,CAC5C,OASF,OANuB,EAAE,GAAG,EAO1B,IANc,UAOZ,GAAI,CAAC,IAAa,CAChB,IAEA,MACF,CACA,MAAM,EAAK,MAAM,GACjB,KACF,KAbgB,YAcd,GAAI,CAAC,IAAe,CAClB,IAEA,MACF,CACA,MAAM,EAAK,QAAQ,GACnB,KACF,KAnBgB,YAoBd,GAAI,CAAC,IAAe,CAClB,IAEA,MACF,CACA,MAAM,EAAK,QAAQ,GACnB,KACF,KA5BiB,aA6Bf,GAAI,CAAC,IAAgB,CACnB,IAEA,MACF,CACA,MAAM,EAAK,SAAS,GACpB,KACF,SACE,IAEA,MACJ,CAIA,GAFA,EAAK,KAAK,CAAC,OAAO,CAAC,AAAC,GAAS,EAAK,UAAU,IAExC,EAAK,WAAW,GAAI,CACtB,EAAK,SAAS,CAAC,EAAK,QAAQ,CAAC,GAAG,EAChC,IAEA,MACF,CAEA,IAAM,EAAU,IAAI,EAAK,GAIzB,GAFA,EAAK,eAAe,GAAG,IAAI,CAAG,EAE1B,CAAC,KAAe,CAAC,KAAiB,CAAC,KAAiB,CAAC,IAAgB,CACvE,EAAQ,iBAAiB,CAAC,CAAA,GAAM,IAAI,CAAC,KACnC,EAAK,SAAS,CAAC,EAAK,QAAQ,CAAC,IAAI,EACjC,GACF,GAEA,MACF,CAEA,IACA,IACA,GACF,CAEA,SAAS,IACP,OAAO,gBAAgB,CAAC,QAAS,EAAa,CAAE,KAAM,CAAA,CAAK,EAC7D,CAEA,eAAe,EAAY,CAAC,EAC1B,GAAI,EAAK,SAAS,KAAO,EAAK,QAAQ,CAAC,OAAO,CAC5C,OAGF,OAAQ,EAAE,GAAG,EACX,IAAK,UACH,GAAI,CAAC,IAAa,CAChB,IAEA,MACF,CACA,MAAM,EAAK,MAAM,GACjB,KACF,KAAK,YACH,GAAI,CAAC,IAAe,CAClB,IAEA,MACF,CACA,MAAM,EAAK,QAAQ,GACnB,KACF,KAAK,YACH,GAAI,CAAC,IAAe,CAClB,IAEA,MACF,CACA,MAAM,EAAK,QAAQ,GACnB,KACF,KAAK,aACH,GAAI,CAAC,IAAgB,CACnB,IAEA,MACF,CACA,MAAM,EAAK,SAAS,GACpB,KACF,SACE,IAEA,MACJ,CAIA,GAFA,EAAK,KAAK,CAAC,OAAO,CAAC,AAAC,GAAS,EAAK,UAAU,IAExC,EAAK,WAAW,GAAI,CACtB,EAAK,SAAS,CAAC,EAAK,QAAQ,CAAC,GAAG,EAChC,IAEA,MACF,CAEA,IAAM,EAAU,IAAI,EAAK,GAIzB,GAFA,EAAK,eAAe,GAAG,IAAI,CAAG,EAE1B,CAAC,KAAe,CAAC,KAAiB,CAAC,KAAiB,CAAC,IAAgB,CACvE,EAAQ,iBAAiB,CAAC,CAAA,GAAM,IAAI,CAAC,KACnC,EAAK,SAAS,CAAC,EAAK,QAAQ,CAAC,IAAI,EACjC,GACF,GAEA,MACF,CAEA,IACA,IACA,GACF,CAwBA,SAAS,IACP,OAAO,EAAQ,EAAK,aAAa,CACnC,CAEA,SAAS,IACP,OAAO,EAAQ,EAAK,aAAa,CAAC,GAAG,CAAC,AAAC,GAAW,IAAI,EAAO,CAAC,OAAO,IACvE,CAEA,SAAS,IACP,OAAO,EAAQ,EAAK,UAAU,CAChC,CAEA,SAAS,IACP,OAAO,EAAQ,EAAK,UAAU,CAAC,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,CAAC,OAAO,IAC9D,CAEA,SAAS,EAAQ,CAAK,EACpB,OAAO,EAAM,IAAI,CAAC,AAAC,GACV,EAAM,IAAI,CAAC,CAAC,EAAM,IACvB,AAAc,IAAV,GAIA,AAAa,MAAb,EAAK,IAAI,EAMN,AAFY,CAAK,CAAC,EAAQ,EAAE,CAEjB,SAAS,CAAC,EAAK,IAAI,GAG3C,CAtDA,EAAS,gBAAgB,CAAC,QAAS,KAC7B,EAAS,SAAS,CAAC,QAAQ,CAAC,UAC9B,EAAS,SAAS,CAAC,MAAM,CAAC,SAC1B,EAAS,SAAS,CAAC,GAAG,CAAC,WACvB,EAAS,WAAW,CAAG,UACvB,EAAK,KAAK,GACV,IACA,EAAK,eAAe,GAAG,IAAI,CAAG,IAAI,EAAK,GACvC,EAAK,eAAe,GAAG,IAAI,CAAG,IAAI,EAAK,GACvC,IACA,KACS,EAAS,SAAS,CAAC,QAAQ,CAAC,aACrC,EAAK,OAAO,GACZ,EAAU,SAAS,CAAG,EACtB,IACA,EAAK,eAAe,GAAG,IAAI,CAAG,IAAI,EAAK,GACvC,EAAK,eAAe,GAAG,IAAI,CAAG,IAAI,EAAK,GACvC,IACA,IAEJ","sources":["<anon>","src/scripts/main.js","src/modules/Tile.js","src/modules/Game.class.js"],"sourcesContent":["class $296a42d4036cf796$export$2e2bcd8739ae039 {\n    #tileElement;\n    #x;\n    #y;\n    #value;\n    constructor(tileContainer, value = Math.random() < 0.9 ? 2 : 4){\n        this.#tileElement = document.createElement(\"div\");\n        this.#tileElement.classList.add(\"tile\");\n        tileContainer.append(this.#tileElement);\n        this.value = value;\n    }\n    get value() {\n        return this.#value;\n    }\n    set value(v) {\n        this.#value = v;\n        this.#tileElement.textContent = v;\n        const { background: background, textColor: textColor } = $296a42d4036cf796$var$getColors(v);\n        this.#tileElement.style.setProperty(\"--background-color\", background);\n        this.#tileElement.style.setProperty(\"--text-color\", textColor);\n    }\n    set x(value) {\n        this.#x = value;\n        this.#tileElement.style.setProperty(\"--x\", value);\n    }\n    get x() {\n        return this.#x;\n    }\n    set y(value) {\n        this.#y = value;\n        this.#tileElement.style.setProperty(\"--y\", value);\n    }\n    get y() {\n        return this.#y;\n    }\n    remove() {\n        this.#tileElement.remove();\n    }\n    waitForTransition(animation = false) {\n        return new Promise((resolve)=>{\n            this.#tileElement.addEventListener(animation ? \"animationend\" : \"transitionend\", resolve, {\n                once: true\n            });\n        });\n    }\n}\nfunction $296a42d4036cf796$var$getColors(number) {\n    let colors = {};\n    switch(number){\n        case 2:\n            colors = {\n                background: \"#eee4da\",\n                textColor: \"#776e65\"\n            };\n            break;\n        case 4:\n            colors = {\n                background: \"#ede0c8\",\n                textColor: \"#776e65\"\n            };\n            break;\n        case 8:\n            colors = {\n                background: \"#f2b179\",\n                textColor: \"#f9f6f2\"\n            };\n            break;\n        case 16:\n            colors = {\n                background: \"#f59563\",\n                textColor: \"#f9f6f2\"\n            };\n            break;\n        case 32:\n            colors = {\n                background: \"#f67c5f\",\n                textColor: \"#f9f6f2\"\n            };\n            break;\n        case 64:\n            colors = {\n                background: \"#f65e3b\",\n                textColor: \"#f9f6f2\"\n            };\n            break;\n        case 128:\n            colors = {\n                background: \"#edcf72\",\n                textColor: \"#f9f6f2\"\n            };\n            break;\n        case 256:\n            colors = {\n                background: \"#edcc61\",\n                textColor: \"#f9f6f2\"\n            };\n            break;\n        case 512:\n            colors = {\n                background: \"#edc850\",\n                textColor: \"#f9f6f2\"\n            };\n            break;\n        case 1024:\n            colors = {\n                background: \"#edc53f\",\n                textColor: \"#f9f6f2\"\n            };\n            break;\n        case 2048:\n            colors = {\n                background: \"#edc22e\",\n                textColor: \"#f9f6f2\"\n            };\n    }\n    return colors;\n}\n\n\n\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nconst $a5fd07fa01589658$var$GRID_SIZE = 4;\nconst $a5fd07fa01589658$var$CELL_SIZE = 75;\nconst $a5fd07fa01589658$var$CELL_GAP = 10;\nlet $a5fd07fa01589658$var$score = 0;\nclass $a5fd07fa01589658$var$Game {\n    static Statuses = {\n        IDLE: \"idle\",\n        PLAYING: \"playing\",\n        WIN: \"win\",\n        LOSE: \"lose\"\n    };\n    #cells;\n    constructor(gridElement){\n        gridElement.style.setProperty(\"--grid-size\", $a5fd07fa01589658$var$GRID_SIZE);\n        gridElement.style.setProperty(\"--cell-size\", `${$a5fd07fa01589658$var$CELL_SIZE}px`);\n        gridElement.style.setProperty(\"--cell-gap\", `${$a5fd07fa01589658$var$CELL_GAP}px`);\n        this.#cells = $a5fd07fa01589658$var$createCellElements(gridElement).map((cellElement, index)=>{\n            return new $a5fd07fa01589658$var$Cell(cellElement, index % $a5fd07fa01589658$var$GRID_SIZE, Math.floor(index / $a5fd07fa01589658$var$GRID_SIZE));\n        });\n        $a5fd07fa01589658$var$score = 0;\n        this.status = $a5fd07fa01589658$var$Game.Statuses.IDLE;\n        this.board = [\n            [\n                0,\n                4,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n    }\n    get cells() {\n        return this.#cells;\n    }\n    get cellsByRow() {\n        return this.#cells.reduce((cellGrid, cell)=>{\n            cellGrid[cell.y] = cellGrid[cell.y] || [];\n            cellGrid[cell.y][cell.x] = cell;\n            return cellGrid;\n        }, []);\n    }\n    get cellsByColumn() {\n        return this.#cells.reduce((cellGrid, cell)=>{\n            cellGrid[cell.x] = cellGrid[cell.x] || [];\n            cellGrid[cell.x][cell.y] = cell;\n            return cellGrid;\n        }, []);\n    }\n    get #emptyCells() {\n        return this.#cells.filter((cell)=>cell.tile == null);\n    }\n    randomEmptyCell() {\n        const randomIndex = Math.floor(Math.random() * this.#emptyCells.length);\n        return this.#emptyCells[randomIndex];\n    }\n    moveLeft() {\n        return this.slideTiles(this.cellsByRow);\n    }\n    moveRight() {\n        return this.slideTiles(this.cellsByRow.map((row)=>[\n                ...row\n            ].reverse()));\n    }\n    moveUp() {\n        return this.slideTiles(this.cellsByColumn);\n    }\n    moveDown() {\n        return this.slideTiles(this.cellsByColumn.map((column)=>[\n                ...column\n            ].reverse()));\n    }\n    slideTiles(cells) {\n        return Promise.all(cells.flatMap((group)=>{\n            const promises = [];\n            for(let i = 1; i < group.length; i++){\n                const cell = group[i];\n                if (cell.tile == null) continue;\n                let lastValidCell;\n                for(let j = i - 1; j >= 0; j--){\n                    const moveToCell = group[j];\n                    if (!moveToCell.canAccept(cell.tile)) break;\n                    lastValidCell = moveToCell;\n                }\n                if (lastValidCell != null) {\n                    promises.push(cell.tile.waitForTransition());\n                    if (lastValidCell.tile != null) lastValidCell.mergeTile = cell.tile;\n                    else lastValidCell.tile = cell.tile;\n                    cell.tile = null;\n                }\n            }\n            return promises;\n        }));\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return $a5fd07fa01589658$var$score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    setStatus(statusGame) {\n        this.status = statusGame;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.Statuses.PLAYING;\n    }\n    checkForWin() {\n        let check = false;\n        this.cells.forEach((cell)=>{\n            if (cell.tile == null) return;\n            if (cell.tile.value === 2048) check = true;\n        });\n        return check;\n    }\n    restart() {\n        const tiles = document.querySelectorAll(\".tile\");\n        tiles.forEach((el)=>el.remove());\n        $a5fd07fa01589658$var$score = 0;\n        this.status = $a5fd07fa01589658$var$Game.Statuses.PLAYING;\n        this.#cells.forEach((cell)=>{\n            cell.tile = null;\n            cell.mergeTile = null;\n        });\n    }\n}\nclass $a5fd07fa01589658$var$Cell {\n    #cellElement;\n    #x;\n    #y;\n    #tile;\n    #mergeTile;\n    constructor(cellElement, x, y){\n        this.#cellElement = cellElement;\n        this.#x = x;\n        this.#y = y;\n    }\n    get x() {\n        return this.#x;\n    }\n    get y() {\n        return this.#y;\n    }\n    get tile() {\n        return this.#tile;\n    }\n    set tile(value) {\n        this.#tile = value;\n        if (value == null) return;\n        this.#tile.x = this.#x;\n        this.#tile.y = this.#y;\n    }\n    get mergeTile() {\n        return this.#mergeTile;\n    }\n    set mergeTile(value) {\n        this.#mergeTile = value;\n        if (value == null) return;\n        this.#mergeTile.x = this.#x;\n        this.#mergeTile.y = this.#y;\n    }\n    canAccept(tile) {\n        return this.tile == null || this.mergeTile == null && this.tile.value === tile.value;\n    }\n    mergeTiles() {\n        if (this.tile == null || this.mergeTile == null) return;\n        $a5fd07fa01589658$var$score += this.tile.value + this.mergeTile.value;\n        this.tile.value = this.tile.value + this.mergeTile.value;\n        this.mergeTile.remove();\n        this.mergeTile = null;\n    }\n}\nfunction $a5fd07fa01589658$var$createCellElements(gridElement) {\n    const cells = [];\n    for(let i = 0; i < $a5fd07fa01589658$var$GRID_SIZE * $a5fd07fa01589658$var$GRID_SIZE; i++){\n        const cell = document.createElement(\"div\");\n        cell.classList.add(\"cell\");\n        cells.push(cell);\n        gridElement.append(cell);\n    }\n    return cells;\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$startBtn = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$gameBoard = document.querySelector(\".game-board\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$messages = document.querySelector(\".message-container\").children;\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports($09e991522ca7e64e$var$gameBoard);\nfunction $09e991522ca7e64e$var$updateScore() {\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n}\nfunction $09e991522ca7e64e$var$updateStatus() {\n    const [messageLose, messageWin, messageStart] = $09e991522ca7e64e$var$messages;\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    const hiddenClass = \"hidden\";\n    Array.from($09e991522ca7e64e$var$messages).forEach((message)=>{\n        message.classList.add(hiddenClass);\n    });\n    switch(gameStatus){\n        case $a5fd07fa01589658$exports.Statuses.IDLE:\n            messageStart.classList.remove(hiddenClass);\n            break;\n        case $a5fd07fa01589658$exports.Statuses.WIN:\n            messageWin.classList.remove(hiddenClass);\n            break;\n        case $a5fd07fa01589658$exports.Statuses.LOSE:\n            messageLose.classList.remove(hiddenClass);\n            break;\n        default:\n            break;\n    }\n}\nfunction $09e991522ca7e64e$var$setupSwipeInput() {\n    let swiping = false;\n    document.addEventListener(\"touchstart\", (e)=>{\n        e.preventDefault();\n        if (swiping) return;\n        swiping = true;\n        const startX = e.touches[0].clientX;\n        const startY = e.touches[0].clientY;\n        let endSwipe = false;\n        document.addEventListener(\"touchend\", (ev)=>{\n            ev.preventDefault();\n            if (endSwipe) return;\n            endSwipe = true;\n            const endX = ev.changedTouches[0].clientX;\n            const endY = ev.changedTouches[0].clientY;\n            const deltaX = endX - startX;\n            const deltaY = endY - startY;\n            const absDeltaX = Math.abs(deltaX);\n            const absDeltaY = Math.abs(deltaY);\n            const threshold = 100; // Поріг чутливості\n            const obj = {\n                key: \"-\"\n            };\n            if (absDeltaX < threshold && absDeltaY < threshold) {\n                swiping = false;\n                endSwipe = false;\n                $09e991522ca7e64e$var$setupSwipeInput();\n                return;\n            }\n            // Визначення напрямку свайпа\n            if (absDeltaX > threshold) {\n                if (deltaX > 0) obj.key = \"ArrowRight\";\n                else obj.key = \"ArrowLeft\";\n            } else if (Math.abs(deltaY) > threshold) {\n                if (deltaY > 0) obj.key = \"ArrowDown\";\n                else obj.key = \"ArrowUp\";\n            }\n            $09e991522ca7e64e$var$swipeInput(obj);\n            swiping = false;\n            endSwipe = false;\n        }, {\n            once: true\n        });\n    }, {\n        once: true\n    });\n}\nasync function $09e991522ca7e64e$var$swipeInput(e) {\n    if ($09e991522ca7e64e$var$game.getStatus() !== $a5fd07fa01589658$exports.Statuses.PLAYING) return;\n    const directionSwipe = e.key;\n    const swipeUp = \"ArrowUp\";\n    const swipeDown = \"ArrowDown\";\n    const swipeRight = \"ArrowRight\";\n    const swipeLeft = \"ArrowLeft\";\n    switch(directionSwipe){\n        case swipeUp:\n            if (!$09e991522ca7e64e$var$canMoveUp()) {\n                $09e991522ca7e64e$var$setupInput();\n                return;\n            }\n            await $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case swipeDown:\n            if (!$09e991522ca7e64e$var$canMoveDown()) {\n                $09e991522ca7e64e$var$setupInput();\n                return;\n            }\n            await $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case swipeLeft:\n            if (!$09e991522ca7e64e$var$canMoveLeft()) {\n                $09e991522ca7e64e$var$setupInput();\n                return;\n            }\n            await $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case swipeRight:\n            if (!$09e991522ca7e64e$var$canMoveRight()) {\n                $09e991522ca7e64e$var$setupInput();\n                return;\n            }\n            await $09e991522ca7e64e$var$game.moveRight();\n            break;\n        default:\n            $09e991522ca7e64e$var$setupSwipeInput();\n            return;\n    }\n    $09e991522ca7e64e$var$game.cells.forEach((cell)=>cell.mergeTiles());\n    if ($09e991522ca7e64e$var$game.checkForWin()) {\n        $09e991522ca7e64e$var$game.setStatus($a5fd07fa01589658$exports.Statuses.WIN);\n        $09e991522ca7e64e$var$updateStatus();\n        return;\n    }\n    const newTile = new (0, $296a42d4036cf796$export$2e2bcd8739ae039)($09e991522ca7e64e$var$gameBoard);\n    $09e991522ca7e64e$var$game.randomEmptyCell().tile = newTile;\n    if (!$09e991522ca7e64e$var$canMoveUp() && !$09e991522ca7e64e$var$canMoveDown() && !$09e991522ca7e64e$var$canMoveLeft() && !$09e991522ca7e64e$var$canMoveRight()) {\n        newTile.waitForTransition(true).then(()=>{\n            $09e991522ca7e64e$var$game.setStatus($a5fd07fa01589658$exports.Statuses.LOSE);\n            $09e991522ca7e64e$var$updateStatus();\n        });\n        return;\n    }\n    $09e991522ca7e64e$var$updateScore();\n    $09e991522ca7e64e$var$updateStatus();\n    $09e991522ca7e64e$var$setupSwipeInput();\n}\nfunction $09e991522ca7e64e$var$setupInput() {\n    window.addEventListener(\"keyup\", $09e991522ca7e64e$var$handleInput, {\n        once: true\n    });\n}\nasync function $09e991522ca7e64e$var$handleInput(e) {\n    if ($09e991522ca7e64e$var$game.getStatus() !== $a5fd07fa01589658$exports.Statuses.PLAYING) return;\n    switch(e.key){\n        case \"ArrowUp\":\n            if (!$09e991522ca7e64e$var$canMoveUp()) {\n                $09e991522ca7e64e$var$setupInput();\n                return;\n            }\n            await $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            if (!$09e991522ca7e64e$var$canMoveDown()) {\n                $09e991522ca7e64e$var$setupInput();\n                return;\n            }\n            await $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            if (!$09e991522ca7e64e$var$canMoveLeft()) {\n                $09e991522ca7e64e$var$setupInput();\n                return;\n            }\n            await $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            if (!$09e991522ca7e64e$var$canMoveRight()) {\n                $09e991522ca7e64e$var$setupInput();\n                return;\n            }\n            await $09e991522ca7e64e$var$game.moveRight();\n            break;\n        default:\n            $09e991522ca7e64e$var$setupInput();\n            return;\n    }\n    $09e991522ca7e64e$var$game.cells.forEach((cell)=>cell.mergeTiles());\n    if ($09e991522ca7e64e$var$game.checkForWin()) {\n        $09e991522ca7e64e$var$game.setStatus($a5fd07fa01589658$exports.Statuses.WIN);\n        $09e991522ca7e64e$var$updateStatus();\n        return;\n    }\n    const newTile = new (0, $296a42d4036cf796$export$2e2bcd8739ae039)($09e991522ca7e64e$var$gameBoard);\n    $09e991522ca7e64e$var$game.randomEmptyCell().tile = newTile;\n    if (!$09e991522ca7e64e$var$canMoveUp() && !$09e991522ca7e64e$var$canMoveDown() && !$09e991522ca7e64e$var$canMoveLeft() && !$09e991522ca7e64e$var$canMoveRight()) {\n        newTile.waitForTransition(true).then(()=>{\n            $09e991522ca7e64e$var$game.setStatus($a5fd07fa01589658$exports.Statuses.LOSE);\n            $09e991522ca7e64e$var$updateStatus();\n        });\n        return;\n    }\n    $09e991522ca7e64e$var$updateScore();\n    $09e991522ca7e64e$var$updateStatus();\n    $09e991522ca7e64e$var$setupInput();\n}\n$09e991522ca7e64e$var$startBtn.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startBtn.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$startBtn.classList.remove(\"start\");\n        $09e991522ca7e64e$var$startBtn.classList.add(\"restart\");\n        $09e991522ca7e64e$var$startBtn.textContent = \"Restart\";\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$updateStatus();\n        $09e991522ca7e64e$var$game.randomEmptyCell().tile = new (0, $296a42d4036cf796$export$2e2bcd8739ae039)($09e991522ca7e64e$var$gameBoard);\n        $09e991522ca7e64e$var$game.randomEmptyCell().tile = new (0, $296a42d4036cf796$export$2e2bcd8739ae039)($09e991522ca7e64e$var$gameBoard);\n        $09e991522ca7e64e$var$setupInput();\n        $09e991522ca7e64e$var$setupSwipeInput();\n    } else if ($09e991522ca7e64e$var$startBtn.classList.contains(\"restart\")) {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$gameScore.innerHTML = 0;\n        $09e991522ca7e64e$var$updateStatus();\n        $09e991522ca7e64e$var$game.randomEmptyCell().tile = new (0, $296a42d4036cf796$export$2e2bcd8739ae039)($09e991522ca7e64e$var$gameBoard);\n        $09e991522ca7e64e$var$game.randomEmptyCell().tile = new (0, $296a42d4036cf796$export$2e2bcd8739ae039)($09e991522ca7e64e$var$gameBoard);\n        $09e991522ca7e64e$var$setupInput();\n        $09e991522ca7e64e$var$setupSwipeInput();\n    }\n});\nfunction $09e991522ca7e64e$var$canMoveUp() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$game.cellsByColumn);\n}\nfunction $09e991522ca7e64e$var$canMoveDown() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$game.cellsByColumn.map((column)=>[\n            ...column\n        ].reverse()));\n}\nfunction $09e991522ca7e64e$var$canMoveLeft() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$game.cellsByRow);\n}\nfunction $09e991522ca7e64e$var$canMoveRight() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$game.cellsByRow.map((row)=>[\n            ...row\n        ].reverse()));\n}\nfunction $09e991522ca7e64e$var$canMove(cells) {\n    return cells.some((group)=>{\n        return group.some((cell, index)=>{\n            if (index === 0) return false;\n            if (cell.tile == null) return false;\n            const moveToCell = group[index - 1];\n            return moveToCell.canAccept(cell.tile);\n        });\n    });\n}\n\n\n//# sourceMappingURL=index.546c02a6.js.map\n","'use strict';\nimport Tile from '../modules/Tile.js';\n\nconst Game = require('../modules/Game.class');\n\nconst startBtn = document.querySelector('.start');\nconst gameBoard = document.querySelector('.game-board');\nconst gameScore = document.querySelector('.game-score');\nconst messages = document.querySelector('.message-container').children;\nconst game = new Game(gameBoard);\n\nfunction updateScore() {\n  gameScore.textContent = game.getScore();\n}\n\nfunction updateStatus() {\n  const [messageLose, messageWin, messageStart] = messages;\n  const gameStatus = game.getStatus();\n  const hiddenClass = 'hidden';\n\n  Array.from(messages).forEach((message) => {\n    message.classList.add(hiddenClass);\n  });\n\n  switch (gameStatus) {\n    case Game.Statuses.IDLE:\n      messageStart.classList.remove(hiddenClass);\n      break;\n    case Game.Statuses.WIN:\n      messageWin.classList.remove(hiddenClass);\n      break;\n    case Game.Statuses.LOSE:\n      messageLose.classList.remove(hiddenClass);\n      break;\n    default:\n      break;\n  }\n}\n\nfunction setupSwipeInput() {\n  let swiping = false;\n\n  document.addEventListener(\n    'touchstart',\n    (e) => {\n      e.preventDefault();\n\n      if (swiping) {\n        return;\n      }\n\n      swiping = true;\n\n      const startX = e.touches[0].clientX;\n      const startY = e.touches[0].clientY;\n      let endSwipe = false;\n\n      document.addEventListener(\n        'touchend',\n        (ev) => {\n          ev.preventDefault();\n\n          if (endSwipe) {\n            return;\n          }\n\n          endSwipe = true;\n\n          const endX = ev.changedTouches[0].clientX;\n          const endY = ev.changedTouches[0].clientY;\n\n          const deltaX = endX - startX;\n          const deltaY = endY - startY;\n          const absDeltaX = Math.abs(deltaX);\n          const absDeltaY = Math.abs(deltaY);\n\n          const threshold = 100; // Поріг чутливості\n          const obj = { key: '-' };\n\n          if (absDeltaX < threshold && absDeltaY < threshold) {\n            swiping = false;\n            endSwipe = false;\n            setupSwipeInput();\n\n            return;\n          }\n\n          // Визначення напрямку свайпа\n          if (absDeltaX > threshold) {\n            if (deltaX > 0) {\n              obj.key = 'ArrowRight';\n            } else {\n              obj.key = 'ArrowLeft';\n            }\n          } else if (Math.abs(deltaY) > threshold) {\n            if (deltaY > 0) {\n              obj.key = 'ArrowDown';\n            } else {\n              obj.key = 'ArrowUp';\n            }\n          }\n\n          swipeInput(obj);\n          swiping = false;\n          endSwipe = false;\n        },\n        { once: true },\n      );\n    },\n    { once: true },\n  );\n}\n\nasync function swipeInput(e) {\n  if (game.getStatus() !== Game.Statuses.PLAYING) {\n    return;\n  }\n\n  const directionSwipe = e.key;\n  const swipeUp = 'ArrowUp';\n  const swipeDown = 'ArrowDown';\n  const swipeRight = 'ArrowRight';\n  const swipeLeft = 'ArrowLeft';\n\n  switch (directionSwipe) {\n    case swipeUp:\n      if (!canMoveUp()) {\n        setupInput();\n\n        return;\n      }\n      await game.moveUp();\n      break;\n    case swipeDown:\n      if (!canMoveDown()) {\n        setupInput();\n\n        return;\n      }\n      await game.moveDown();\n      break;\n    case swipeLeft:\n      if (!canMoveLeft()) {\n        setupInput();\n\n        return;\n      }\n      await game.moveLeft();\n      break;\n    case swipeRight:\n      if (!canMoveRight()) {\n        setupInput();\n\n        return;\n      }\n      await game.moveRight();\n      break;\n    default:\n      setupSwipeInput();\n\n      return;\n  }\n\n  game.cells.forEach((cell) => cell.mergeTiles());\n\n  if (game.checkForWin()) {\n    game.setStatus(Game.Statuses.WIN);\n    updateStatus();\n\n    return;\n  }\n\n  const newTile = new Tile(gameBoard);\n\n  game.randomEmptyCell().tile = newTile;\n\n  if (!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight()) {\n    newTile.waitForTransition(true).then(() => {\n      game.setStatus(Game.Statuses.LOSE);\n      updateStatus();\n    });\n\n    return;\n  }\n\n  updateScore();\n  updateStatus();\n  setupSwipeInput();\n}\n\nfunction setupInput() {\n  window.addEventListener('keyup', handleInput, { once: true });\n}\n\nasync function handleInput(e) {\n  if (game.getStatus() !== Game.Statuses.PLAYING) {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowUp':\n      if (!canMoveUp()) {\n        setupInput();\n\n        return;\n      }\n      await game.moveUp();\n      break;\n    case 'ArrowDown':\n      if (!canMoveDown()) {\n        setupInput();\n\n        return;\n      }\n      await game.moveDown();\n      break;\n    case 'ArrowLeft':\n      if (!canMoveLeft()) {\n        setupInput();\n\n        return;\n      }\n      await game.moveLeft();\n      break;\n    case 'ArrowRight':\n      if (!canMoveRight()) {\n        setupInput();\n\n        return;\n      }\n      await game.moveRight();\n      break;\n    default:\n      setupInput();\n\n      return;\n  }\n\n  game.cells.forEach((cell) => cell.mergeTiles());\n\n  if (game.checkForWin()) {\n    game.setStatus(Game.Statuses.WIN);\n    updateStatus();\n\n    return;\n  }\n\n  const newTile = new Tile(gameBoard);\n\n  game.randomEmptyCell().tile = newTile;\n\n  if (!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight()) {\n    newTile.waitForTransition(true).then(() => {\n      game.setStatus(Game.Statuses.LOSE);\n      updateStatus();\n    });\n\n    return;\n  }\n\n  updateScore();\n  updateStatus();\n  setupInput();\n}\n\nstartBtn.addEventListener('click', () => {\n  if (startBtn.classList.contains('start')) {\n    startBtn.classList.remove('start');\n    startBtn.classList.add('restart');\n    startBtn.textContent = 'Restart';\n    game.start();\n    updateStatus();\n    game.randomEmptyCell().tile = new Tile(gameBoard);\n    game.randomEmptyCell().tile = new Tile(gameBoard);\n    setupInput();\n    setupSwipeInput();\n  } else if (startBtn.classList.contains('restart')) {\n    game.restart();\n    gameScore.innerHTML = 0;\n    updateStatus();\n    game.randomEmptyCell().tile = new Tile(gameBoard);\n    game.randomEmptyCell().tile = new Tile(gameBoard);\n    setupInput();\n    setupSwipeInput();\n  }\n});\n\nfunction canMoveUp() {\n  return canMove(game.cellsByColumn);\n}\n\nfunction canMoveDown() {\n  return canMove(game.cellsByColumn.map((column) => [...column].reverse()));\n}\n\nfunction canMoveLeft() {\n  return canMove(game.cellsByRow);\n}\n\nfunction canMoveRight() {\n  return canMove(game.cellsByRow.map((row) => [...row].reverse()));\n}\n\nfunction canMove(cells) {\n  return cells.some((group) => {\n    return group.some((cell, index) => {\n      if (index === 0) {\n        return false;\n      }\n\n      if (cell.tile == null) {\n        return false;\n      }\n\n      const moveToCell = group[index - 1];\n\n      return moveToCell.canAccept(cell.tile);\n    });\n  });\n}\n","export default class Tile {\n  #tileElement;\n  #x;\n  #y;\n  #value;\n\n  constructor(tileContainer, value = Math.random() < 0.9 ? 2 : 4) {\n    this.#tileElement = document.createElement('div');\n    this.#tileElement.classList.add('tile');\n    tileContainer.append(this.#tileElement);\n    this.value = value;\n  }\n\n  get value() {\n    return this.#value;\n  }\n\n  set value(v) {\n    this.#value = v;\n    this.#tileElement.textContent = v;\n\n    const { background, textColor } = getColors(v);\n\n    this.#tileElement.style.setProperty('--background-color', background);\n    this.#tileElement.style.setProperty('--text-color', textColor);\n  }\n\n  set x(value) {\n    this.#x = value;\n    this.#tileElement.style.setProperty('--x', value);\n  }\n\n  get x() {\n    return this.#x;\n  }\n\n  set y(value) {\n    this.#y = value;\n    this.#tileElement.style.setProperty('--y', value);\n  }\n\n  get y() {\n    return this.#y;\n  }\n\n  remove() {\n    this.#tileElement.remove();\n  }\n\n  waitForTransition(animation = false) {\n    return new Promise((resolve) => {\n      this.#tileElement.addEventListener(\n        animation ? 'animationend' : 'transitionend',\n        resolve,\n        {\n          once: true,\n        },\n      );\n    });\n  }\n}\n\nfunction getColors(number) {\n  let colors = {};\n\n  switch (number) {\n    case 2:\n      colors = {\n        background: '#eee4da',\n        textColor: '#776e65',\n      };\n      break;\n    case 4:\n      colors = {\n        background: '#ede0c8',\n        textColor: '#776e65',\n      };\n      break;\n    case 8:\n      colors = {\n        background: '#f2b179',\n        textColor: '#f9f6f2',\n      };\n      break;\n    case 16:\n      colors = {\n        background: '#f59563',\n        textColor: '#f9f6f2',\n      };\n      break;\n    case 32:\n      colors = {\n        background: '#f67c5f',\n        textColor: '#f9f6f2',\n      };\n      break;\n    case 64:\n      colors = {\n        background: '#f65e3b',\n        textColor: '#f9f6f2',\n      };\n      break;\n    case 128:\n      colors = {\n        background: '#edcf72',\n        textColor: '#f9f6f2',\n      };\n      break;\n    case 256:\n      colors = {\n        background: '#edcc61',\n        textColor: '#f9f6f2',\n      };\n      break;\n    case 512:\n      colors = {\n        background: '#edc850',\n        textColor: '#f9f6f2',\n      };\n      break;\n    case 1024:\n      colors = {\n        background: '#edc53f',\n        textColor: '#f9f6f2',\n      };\n      break;\n    case 2048:\n      colors = {\n        background: '#edc22e',\n        textColor: '#f9f6f2',\n      };\n  }\n\n  return colors;\n}\n","'use strict';\n\nconst GRID_SIZE = 4;\nconst CELL_SIZE = 75;\nconst CELL_GAP = 10;\nlet score = 0;\n\nclass Game {\n  static Statuses = {\n    IDLE: 'idle',\n    PLAYING: 'playing',\n    WIN: 'win',\n    LOSE: 'lose',\n  };\n  #cells;\n\n  constructor(gridElement) {\n    gridElement.style.setProperty('--grid-size', GRID_SIZE);\n    gridElement.style.setProperty('--cell-size', `${CELL_SIZE}px`);\n    gridElement.style.setProperty('--cell-gap', `${CELL_GAP}px`);\n\n    this.#cells = createCellElements(gridElement).map((cellElement, index) => {\n      return new Cell(\n        cellElement,\n        index % GRID_SIZE,\n        Math.floor(index / GRID_SIZE),\n      );\n    });\n    score = 0;\n    this.status = Game.Statuses.IDLE;\n\n    this.board = [\n      [0, 4, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n  }\n\n  get cells() {\n    return this.#cells;\n  }\n\n  get cellsByRow() {\n    return this.#cells.reduce((cellGrid, cell) => {\n      cellGrid[cell.y] = cellGrid[cell.y] || [];\n      cellGrid[cell.y][cell.x] = cell;\n\n      return cellGrid;\n    }, []);\n  }\n\n  get cellsByColumn() {\n    return this.#cells.reduce((cellGrid, cell) => {\n      cellGrid[cell.x] = cellGrid[cell.x] || [];\n      cellGrid[cell.x][cell.y] = cell;\n\n      return cellGrid;\n    }, []);\n  }\n\n  get #emptyCells() {\n    return this.#cells.filter((cell) => cell.tile == null);\n  }\n\n  randomEmptyCell() {\n    const randomIndex = Math.floor(Math.random() * this.#emptyCells.length);\n\n    return this.#emptyCells[randomIndex];\n  }\n\n  moveLeft() {\n    return this.slideTiles(this.cellsByRow);\n  }\n\n  moveRight() {\n    return this.slideTiles(this.cellsByRow.map((row) => [...row].reverse()));\n  }\n\n  moveUp() {\n    return this.slideTiles(this.cellsByColumn);\n  }\n\n  moveDown() {\n    return this.slideTiles(\n      this.cellsByColumn.map((column) => [...column].reverse()),\n    );\n  }\n\n  slideTiles(cells) {\n    return Promise.all(\n      cells.flatMap((group) => {\n        const promises = [];\n\n        for (let i = 1; i < group.length; i++) {\n          const cell = group[i];\n\n          if (cell.tile == null) {\n            continue;\n          }\n\n          let lastValidCell;\n\n          for (let j = i - 1; j >= 0; j--) {\n            const moveToCell = group[j];\n\n            if (!moveToCell.canAccept(cell.tile)) {\n              break;\n            }\n            lastValidCell = moveToCell;\n          }\n\n          if (lastValidCell != null) {\n            promises.push(cell.tile.waitForTransition());\n\n            if (lastValidCell.tile != null) {\n              lastValidCell.mergeTile = cell.tile;\n            } else {\n              lastValidCell.tile = cell.tile;\n            }\n            cell.tile = null;\n          }\n        }\n\n        return promises;\n      }),\n    );\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  setStatus(statusGame) {\n    this.status = statusGame;\n  }\n\n  start() {\n    this.status = Game.Statuses.PLAYING;\n  }\n\n  checkForWin() {\n    let check = false;\n\n    this.cells.forEach((cell) => {\n      if (cell.tile == null) {\n        return;\n      }\n\n      if (cell.tile.value === 2048) {\n        check = true;\n      }\n    });\n\n    return check;\n  }\n\n  restart() {\n    const tiles = document.querySelectorAll('.tile');\n\n    tiles.forEach((el) => el.remove());\n    score = 0;\n    this.status = Game.Statuses.PLAYING;\n\n    this.#cells.forEach((cell) => {\n      cell.tile = null;\n      cell.mergeTile = null;\n    });\n  }\n}\n\nclass Cell {\n  #cellElement;\n  #x;\n  #y;\n  #tile;\n  #mergeTile;\n\n  constructor(cellElement, x, y) {\n    this.#cellElement = cellElement;\n    this.#x = x;\n    this.#y = y;\n  }\n\n  get x() {\n    return this.#x;\n  }\n\n  get y() {\n    return this.#y;\n  }\n\n  get tile() {\n    return this.#tile;\n  }\n\n  set tile(value) {\n    this.#tile = value;\n\n    if (value == null) {\n      return;\n    }\n    this.#tile.x = this.#x;\n    this.#tile.y = this.#y;\n  }\n\n  get mergeTile() {\n    return this.#mergeTile;\n  }\n\n  set mergeTile(value) {\n    this.#mergeTile = value;\n\n    if (value == null) {\n      return;\n    }\n    this.#mergeTile.x = this.#x;\n    this.#mergeTile.y = this.#y;\n  }\n\n  canAccept(tile) {\n    return (\n      this.tile == null ||\n      (this.mergeTile == null && this.tile.value === tile.value)\n    );\n  }\n\n  mergeTiles() {\n    if (this.tile == null || this.mergeTile == null) {\n      return;\n    }\n    score += this.tile.value + this.mergeTile.value;\n    this.tile.value = this.tile.value + this.mergeTile.value;\n    this.mergeTile.remove();\n    this.mergeTile = null;\n  }\n}\n\nfunction createCellElements(gridElement) {\n  const cells = [];\n\n  for (let i = 0; i < GRID_SIZE * GRID_SIZE; i++) {\n    const cell = document.createElement('div');\n\n    cell.classList.add('cell');\n    cells.push(cell);\n    gridElement.append(cell);\n  }\n\n  return cells;\n}\n\nmodule.exports = Game;\n"],"names":["$296a42d4036cf796$export$2e2bcd8739ae039","constructor","tileContainer","value","Math","random","document","createElement","classList","add","append","v","textContent","background","textColor","$296a42d4036cf796$var$getColors","number","colors","style","setProperty","x","y","remove","waitForTransition","animation","Promise","resolve","addEventListener","once","$a5fd07fa01589658$exports","$a5fd07fa01589658$var$score","$a5fd07fa01589658$var$Game","Statuses","IDLE","PLAYING","WIN","LOSE","gridElement","$a5fd07fa01589658$var$createCellElements","cells","i","$a5fd07fa01589658$var$GRID_SIZE","cell","push","map","cellElement","index","$a5fd07fa01589658$var$Cell","floor","status","board","cellsByRow","reduce","cellGrid","cellsByColumn","filter","tile","randomEmptyCell","randomIndex","length","moveLeft","slideTiles","moveRight","row","reverse","moveUp","moveDown","column","all","flatMap","group","promises","lastValidCell","j","moveToCell","canAccept","mergeTile","getScore","getState","getStatus","setStatus","statusGame","start","checkForWin","check","forEach","restart","tiles","querySelectorAll","el","mergeTiles","$09e991522ca7e64e$var$startBtn","querySelector","$09e991522ca7e64e$var$gameBoard","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$messages","children","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$updateScore","$09e991522ca7e64e$var$updateStatus","messageLose","messageWin","messageStart","gameStatus","hiddenClass","Array","from","message","$09e991522ca7e64e$var$setupSwipeInput","swiping","e","preventDefault","startX","touches","clientX","startY","clientY","endSwipe","ev","endX","changedTouches","endY","deltaX","deltaY","absDeltaX","abs","absDeltaY","obj","key","$09e991522ca7e64e$var$swipeInput","$09e991522ca7e64e$var$canMoveUp","$09e991522ca7e64e$var$setupInput","$09e991522ca7e64e$var$canMoveDown","$09e991522ca7e64e$var$canMoveLeft","$09e991522ca7e64e$var$canMoveRight","newTile","then","window","$09e991522ca7e64e$var$handleInput","$09e991522ca7e64e$var$canMove","some","contains","innerHTML"],"version":3,"file":"index.546c02a6.js.map"}